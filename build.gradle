plugins {
	id 'java'
	id 'eclipse'
	id 'checkstyle'
	id 'jvm-component'
    id 'java-lang'
}

version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/org.knowm.xchart/xchart
	compile group: 'org.knowm.xchart', name: 'xchart', version: '3.2.2'

    // https://mvnrepository.com/artifact/io.jenetics/jenetics
    compile group: 'io.jenetics', name: 'jenetics', version: '3.7.0'
    
    // https://mvnrepository.com/artifact/org.tinyjee.jgraphx/jgraphx
	compile group: 'org.tinyjee.jgraphx', name: 'jgraphx', version: '3.4.1.3'
     
    // JGraphT
    compile 'org.jgrapht:jgrapht-core:0.9.0',
            'org.jgrapht:jgrapht-ext:1.0.0',
    	    'jgraph:jgraph:5.13.0.0'
    	    
    	    
    testCompile 'junit:junit:4.12'

}


// Check the style of Java code
checkstyle {
    configFile = file("${project.rootDir}/config/google_checks.xml")
    toolVersion = '6.7'
}

// Run only execution time optimization example
task runExecutionTimeExample(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'examples.ExecutionTimeExample'
}

// Run only load balancing optimization example
task runLoadBalancingExample(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'examples.LoadBalancingExample'
}


//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
        	'Implementation-Version': 1.0,
        	'Main-Class': 'examples.LoadBalancingExample'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}